/**
 * VisionKrono - Inicializa√ß√£o Autom√°tica de Navega√ß√£o
 * Inclui este script em todas as p√°ginas para ativar a navega√ß√£o unificada
 * 
 * @version 2025.10.26
 */

(function() {
    'use strict';

    console.log('[NAV-INIT] Inicializando sistema de navega√ß√£o...');

    /**
     * Inicializar navega√ß√£o quando DOM estiver pronto
     */
    async function initNavigation() {
        try {
            // 1. Aguardar AuthClient
            console.log('[NAV-INIT] Aguardando AuthClient...');
            await waitForAuthClient();

            // 2. Inicializar NavigationService
            console.log('[NAV-INIT] Inicializando NavigationService...');
            if (window.navigationService) {
                await window.navigationService.init();
            } else {
                throw new Error('NavigationService n√£o encontrado');
            }

            // 3. Inicializar NavigationComponent
            console.log('[NAV-INIT] Inicializando NavigationComponent...');
            if (window.navigationComponent) {
                await window.navigationComponent.init();
            } else {
                throw new Error('NavigationComponent n√£o encontrado');
            }

            console.log('[NAV-INIT] ‚úÖ Sistema de navega√ß√£o pronto');

            // Disparar evento de navega√ß√£o pronta
            window.dispatchEvent(new CustomEvent('navigationReady'));

        } catch (error) {
            console.error('[NAV-INIT] ‚ùå Erro ao inicializar navega√ß√£o:', error);
            
            // Mostrar mensagem de erro na sidebar se existir
            const sidebar = document.getElementById('sidebar');
            if (sidebar) {
                sidebar.innerHTML = `
                    <div class="nav-error">
                        <p>‚ö†Ô∏è Erro ao carregar navega√ß√£o</p>
                        <p style="font-size: 0.75rem; margin-top: 0.5rem;">
                            ${error.message}
                        </p>
                        <button onclick="location.reload()" style="margin-top: 1rem;">
                            üîÑ Recarregar
                        </button>
                    </div>
                `;
            }
        }
    }

    /**
     * Aguardar AuthClient estar dispon√≠vel
     */
    function waitForAuthClient() {
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error('Timeout ao aguardar AuthClient'));
            }, 10000); // 10s timeout

            const tick = () => {
                if (window.authSystem?.currentUser !== undefined) {
                    clearTimeout(timeout);
                    resolve();
                } else {
                    setTimeout(tick, 100);
                }
            };
            tick();
        });
    }

    /**
     * Inicializar quando DOM estiver pronto
     */
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initNavigation);
    } else {
        // DOM j√° est√° pronto
        initNavigation();
    }

    /**
     * Utilidades globais para manipula√ß√£o de navega√ß√£o
     */
    window.NavigationUtils = {
        /**
         * Navegar para um evento espec√≠fico
         */
        goToEvent(eventId, eventName = null) {
            if (window.navigationComponent) {
                window.navigationComponent.updateEventContext(eventId, eventName);
            }
        },

        /**
         * Voltar ao dashboard global (sem contexto de evento)
         */
        goToGlobalDashboard() {
            if (window.navigationComponent) {
                window.navigationComponent.clearEventContext();
            }
            window.location.href = 'index-kromi.html';
        },

        /**
         * Recarregar navega√ß√£o (√∫til ap√≥s mudan√ßas de permiss√µes)
         */
        reloadNavigation() {
            if (window.navigationComponent) {
                window.navigationComponent.reload();
            }
        },

        /**
         * Obter contexto de evento atual
         */
        getCurrentEvent() {
            if (window.navigationService) {
                return window.navigationService.getCurrentEventContext();
            }
            return null;
        },

        /**
         * Verificar se p√°gina atual requer contexto de evento
         */
        requiresEventContext() {
            if (window.navigationService) {
                return window.navigationService.currentRouteRequiresEvent();
            }
            return false;
        }
    };

    console.log('[NAV-INIT] Utilidades de navega√ß√£o dispon√≠veis em window.NavigationUtils');

})();

